apiVersion: apps/v1
kind: Deployment
metadata:
  name: microapp-a
  namespace: myapp
  labels:
    app: demo-microapp-a
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-microapp-a
  template:
    metadata:
      labels:
        app: demo-microapp-a
    spec:
      containers:
      - name: microapp-a
        image: docker.io/library/service-a:last
        # imagePullPolicy: Never
        ports:
        - containerPort: 80

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: microapp-a
#   namespace: myapp
#   labels:
#     app.kubernetes.io/name: demo-microapp-a
# spec:
#   containers:
#   - name: microapp-a
#     image: service-a
#     ports:
#       - containerPort: 80
#         name: 80

---
apiVersion: v1
kind: Service
metadata:
  name: microapp-service-a
  namespace: myapp
spec:
  selector:
    app: demo-microapp-a
  type: ClusterIP
  ports:
  - name: root
    protocol: TCP
    port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/enable-opentelemetry: "true"
    nginx.ingress.kubernetes.io/opentelemetry-trust-incoming-span: "true"
    nginx.ingress.kubernetes.io/opentelemetry-operation-name: "servicea"
    nginx.ingress.kubernetes.io/opentelemetry-config: "/conf/otel-nginx.toml"
    # nginx.ingress.kubernetes.io/enable-opentracing: "true"
    # nginx.ingress.kubernetes.io/opentracing-trust-incoming-span: "true"
  # generation: 1
  name: microapp-a
  namespace: myapp
spec:
  ingressClassName: nginx
  rules:
  - host: esigo.dev.a
    http:
      # opentelemetry:
      #   enabled: false
      paths:
      - backend:
          service:
            name: microapp-service-a
            port:
              number: 80
        path: /
        pathType: Prefix
# status:
#   loadBalancer:
#     ingress:
#     - hostname: localhost

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microapp-b
  namespace: myapp
  labels:
    app: demo-microapp-b
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-microapp-b
  template:
    metadata:
      labels:
        app: demo-microapp-b
    spec:
      containers:
      - name: microapp-b
        image: docker.io/library/service-b:last
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: microapp-service-b
  namespace: myapp
spec:
  selector:
    app: demo-microapp-b
  type: ClusterIP
  ports:
  - name: root
    protocol: TCP
    port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/enable-opentelemetry: "true"
    nginx.ingress.kubernetes.io/opentelemetry-trust-incoming-span: "true"
    nginx.ingress.kubernetes.io/opentelemetry-config: "/conf/otel-nginx.toml"
    nginx.ingress.kubernetes.io/opentelemetry-operation-name: "serviceb"
    kubernetes.io/ingress.class: "nginx"
    # nginx.ingress.kubernetes.io/enable-opentracing: "true"
    # nginx.ingress.kubernetes.io/opentracing-trust-incoming-span: "true"
  # generation: 1
  name: microapp-b
  namespace: myapp
spec:
  # ingressClassName: nginx
  rules:
  - host: esigo.dev.b
    http:
      paths:
      - backend:
          service:
            name: microapp-service-b
            port:
              number: 80
        path: /
        pathType: Prefix
# status:
#   loadBalancer:
#     ingress:
#     - hostname: localhost

# ---
# apiVersion: v1
# kind: ConfigMap
# data:
#   enable-opentelemetry: "true"
#   opentelemetry-config: "/conf/otel-nginx.toml"
# metadata:
#   name: ingress-nginx-controller
#   namespace: ingress-nginx